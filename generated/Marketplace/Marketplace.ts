// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MarketItemCreated extends ethereum.Event {
  get params(): MarketItemCreated__Params {
    return new MarketItemCreated__Params(this);
  }
}

export class MarketItemCreated__Params {
  _event: MarketItemCreated;

  constructor(event: MarketItemCreated) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get sold(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class Marketplace__fetchAllMarketItemsResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get sold(): boolean {
    return this[6].toBoolean();
  }
}

export class Marketplace__fetchItemsCreatedResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get sold(): boolean {
    return this[6].toBoolean();
  }
}

export class Marketplace__fetchMarketItemsResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get sold(): boolean {
    return this[6].toBoolean();
  }
}

export class Marketplace__fetchMyNFTsResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get sold(): boolean {
    return this[6].toBoolean();
  }
}

export class Marketplace extends ethereum.SmartContract {
  static bind(address: Address): Marketplace {
    return new Marketplace("Marketplace", address);
  }

  fetchAllMarketItems(): Array<
    Marketplace__fetchAllMarketItemsResultValue0Struct
  > {
    let result = super.call(
      "fetchAllMarketItems",
      "fetchAllMarketItems():((uint256,address,uint256,address,address,uint256,bool)[])",
      []
    );

    return result[0].toTupleArray<
      Marketplace__fetchAllMarketItemsResultValue0Struct
    >();
  }

  try_fetchAllMarketItems(): ethereum.CallResult<
    Array<Marketplace__fetchAllMarketItemsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchAllMarketItems",
      "fetchAllMarketItems():((uint256,address,uint256,address,address,uint256,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        Marketplace__fetchAllMarketItemsResultValue0Struct
      >()
    );
  }

  fetchItemsCreated(): Array<Marketplace__fetchItemsCreatedResultValue0Struct> {
    let result = super.call(
      "fetchItemsCreated",
      "fetchItemsCreated():((uint256,address,uint256,address,address,uint256,bool)[])",
      []
    );

    return result[0].toTupleArray<
      Marketplace__fetchItemsCreatedResultValue0Struct
    >();
  }

  try_fetchItemsCreated(): ethereum.CallResult<
    Array<Marketplace__fetchItemsCreatedResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchItemsCreated",
      "fetchItemsCreated():((uint256,address,uint256,address,address,uint256,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Marketplace__fetchItemsCreatedResultValue0Struct>()
    );
  }

  fetchMarketItems(
    _nftContract: Address,
    _tokenId: BigInt
  ): Array<Marketplace__fetchMarketItemsResultValue0Struct> {
    let result = super.call(
      "fetchMarketItems",
      "fetchMarketItems(address,uint256):((uint256,address,uint256,address,address,uint256,bool)[])",
      [
        ethereum.Value.fromAddress(_nftContract),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toTupleArray<
      Marketplace__fetchMarketItemsResultValue0Struct
    >();
  }

  try_fetchMarketItems(
    _nftContract: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<
    Array<Marketplace__fetchMarketItemsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchMarketItems",
      "fetchMarketItems(address,uint256):((uint256,address,uint256,address,address,uint256,bool)[])",
      [
        ethereum.Value.fromAddress(_nftContract),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Marketplace__fetchMarketItemsResultValue0Struct>()
    );
  }

  fetchMyNFTs(): Array<Marketplace__fetchMyNFTsResultValue0Struct> {
    let result = super.call(
      "fetchMyNFTs",
      "fetchMyNFTs():((uint256,address,uint256,address,address,uint256,bool)[])",
      []
    );

    return result[0].toTupleArray<Marketplace__fetchMyNFTsResultValue0Struct>();
  }

  try_fetchMyNFTs(): ethereum.CallResult<
    Array<Marketplace__fetchMyNFTsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchMyNFTs",
      "fetchMyNFTs():((uint256,address,uint256,address,address,uint256,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Marketplace__fetchMyNFTsResultValue0Struct>()
    );
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class Buy1155Call extends ethereum.Call {
  get inputs(): Buy1155Call__Inputs {
    return new Buy1155Call__Inputs(this);
  }

  get outputs(): Buy1155Call__Outputs {
    return new Buy1155Call__Outputs(this);
  }
}

export class Buy1155Call__Inputs {
  _call: Buy1155Call;

  constructor(call: Buy1155Call) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _itemId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Buy1155Call__Outputs {
  _call: Buy1155Call;

  constructor(call: Buy1155Call) {
    this._call = call;
  }
}

export class Buy721Call extends ethereum.Call {
  get inputs(): Buy721Call__Inputs {
    return new Buy721Call__Inputs(this);
  }

  get outputs(): Buy721Call__Outputs {
    return new Buy721Call__Outputs(this);
  }
}

export class Buy721Call__Inputs {
  _call: Buy721Call;

  constructor(call: Buy721Call) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _itemId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Buy721Call__Outputs {
  _call: Buy721Call;

  constructor(call: Buy721Call) {
    this._call = call;
  }
}

export class Cancel1155Call extends ethereum.Call {
  get inputs(): Cancel1155Call__Inputs {
    return new Cancel1155Call__Inputs(this);
  }

  get outputs(): Cancel1155Call__Outputs {
    return new Cancel1155Call__Outputs(this);
  }
}

export class Cancel1155Call__Inputs {
  _call: Cancel1155Call;

  constructor(call: Cancel1155Call) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _itemId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Cancel1155Call__Outputs {
  _call: Cancel1155Call;

  constructor(call: Cancel1155Call) {
    this._call = call;
  }
}

export class Cancel721Call extends ethereum.Call {
  get inputs(): Cancel721Call__Inputs {
    return new Cancel721Call__Inputs(this);
  }

  get outputs(): Cancel721Call__Outputs {
    return new Cancel721Call__Outputs(this);
  }
}

export class Cancel721Call__Inputs {
  _call: Cancel721Call;

  constructor(call: Cancel721Call) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _itemId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Cancel721Call__Outputs {
  _call: Cancel721Call;

  constructor(call: Cancel721Call) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class Sell1155Call extends ethereum.Call {
  get inputs(): Sell1155Call__Inputs {
    return new Sell1155Call__Inputs(this);
  }

  get outputs(): Sell1155Call__Outputs {
    return new Sell1155Call__Outputs(this);
  }
}

export class Sell1155Call__Inputs {
  _call: Sell1155Call;

  constructor(call: Sell1155Call) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Sell1155Call__Outputs {
  _call: Sell1155Call;

  constructor(call: Sell1155Call) {
    this._call = call;
  }
}

export class Sell721Call extends ethereum.Call {
  get inputs(): Sell721Call__Inputs {
    return new Sell721Call__Inputs(this);
  }

  get outputs(): Sell721Call__Outputs {
    return new Sell721Call__Outputs(this);
  }
}

export class Sell721Call__Inputs {
  _call: Sell721Call;

  constructor(call: Sell721Call) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Sell721Call__Outputs {
  _call: Sell721Call;

  constructor(call: Sell721Call) {
    this._call = call;
  }
}
